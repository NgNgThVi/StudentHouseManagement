// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentHouseMembershipCart.Infrastucture.DatabaseContext;

#nullable disable

namespace StudentHouseMembershipCart.Infrastucture.Migrations
{
    [DbContext(typeof(StudentHouseMembershipCartDatabaseContext))]
    [Migration("20230925134523_SecondDatabase")]
    partial class SecondDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.AttendReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDoPackage")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingDetailId");

                    b.HasIndex("FeedbackId")
                        .IsUnique();

                    b.HasIndex("ReportWorkId");

                    b.ToTable("AttendReport");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPay")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookingDetailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("PackageId");

                    b.ToTable("BookingDetail");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingDetailId");

                    b.HasIndex("StaffId");

                    b.ToTable("BookingDetailStaff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBackDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FeedBack");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0073ae3e-6374-4c66-9a7d-f2e1d411d3b2"),
                            AttendReportId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Created = new DateTime(2023, 9, 25, 20, 45, 22, 588, DateTimeKind.Local).AddTicks(1852),
                            FeedBackDescription = "",
                            FeedBackImage = "",
                            FeedBackName = "hihi",
                            FeedBackRating = "",
                            IsDelete = false,
                            StudentId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("5e6e3ac9-d41c-46f1-a4a4-e91ecec521fd"),
                            AttendReportId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Created = new DateTime(2023, 9, 25, 20, 45, 22, 588, DateTimeKind.Local).AddTicks(1919),
                            FeedBackDescription = "",
                            FeedBackImage = "",
                            FeedBackName = "hahah",
                            FeedBackRating = "",
                            IsDelete = false,
                            StudentId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRe_Newed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numberOfPerWeekDoPackage")
                        .HasColumnType("int");

                    b.Property<int>("weekNumberBooking")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PackageService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PackageService");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.ReportWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("ReportWork");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b778f89a-a306-42a4-84fd-1be8f795dc1a"),
                            Created = new DateTime(2023, 9, 25, 20, 45, 22, 588, DateTimeKind.Local).AddTicks(2172),
                            Description = "Description",
                            IsDelete = false,
                            RoleName = "Staff"
                        },
                        new
                        {
                            Id = new Guid("87791989-38cc-4a41-9526-2052bc34258e"),
                            Created = new DateTime(2023, 9, 25, 20, 45, 22, 588, DateTimeKind.Local).AddTicks(2176),
                            Description = "Description",
                            IsDelete = false,
                            RoleName = "Student"
                        },
                        new
                        {
                            Id = new Guid("b5196cae-9e27-434e-bfd3-2c9db9205eef"),
                            Created = new DateTime(2023, 9, 25, 20, 45, 22, 588, DateTimeKind.Local).AddTicks(2179),
                            Description = "Description",
                            IsDelete = false,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("staffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9589c1a-3cbc-4215-bb84-b8fa7d719440"),
                            Address = "da nang",
                            Birthday = new DateTime(2023, 9, 25, 20, 45, 22, 588, DateTimeKind.Local).AddTicks(2288),
                            Created = new DateTime(2023, 9, 25, 20, 45, 22, 588, DateTimeKind.Local).AddTicks(2285),
                            Email = "Staff@gmail.com",
                            FeedbackId = new Guid("0073ae3e-6374-4c66-9a7d-f2e1d411d3b2"),
                            IsDelete = false,
                            Password = "MANAGER",
                            Phone = "03030303",
                            RoleId = new Guid("87791989-38cc-4a41-9526-2052bc34258e"),
                            StudentName = "Staff"
                        },
                        new
                        {
                            Id = new Guid("b9cf3487-3d04-4cbf-85b7-e33360566485"),
                            Address = "hcm",
                            Birthday = new DateTime(2023, 9, 25, 20, 45, 22, 588, DateTimeKind.Local).AddTicks(2293),
                            Created = new DateTime(2023, 9, 25, 20, 45, 22, 588, DateTimeKind.Local).AddTicks(2292),
                            Email = "Manager@gmail.com",
                            FeedbackId = new Guid("0073ae3e-6374-4c66-9a7d-f2e1d411d3b2"),
                            IsDelete = false,
                            Password = "MANAGER",
                            Phone = "03030303",
                            RoleId = new Guid("87791989-38cc-4a41-9526-2052bc34258e"),
                            StudentName = "Manager"
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Admin", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Role", "Role")
                        .WithMany("Admin")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Apartment", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Region", "Region")
                        .WithMany("Apartment")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Student", "Student")
                        .WithMany("Apartment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.AttendReport", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.BookingDetail", "BookingDetail")
                        .WithMany("AttendReport")
                        .HasForeignKey("BookingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.FeedBack", "FeedBack")
                        .WithOne("AttendReports")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.AttendReport", "FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.ReportWork", "ReportWork")
                        .WithMany("AttendReport")
                        .HasForeignKey("ReportWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingDetail");

                    b.Navigation("FeedBack");

                    b.Navigation("ReportWork");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Booking", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Apartment", "Apartment")
                        .WithMany("Booking")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetail", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDetail")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Package", "Package")
                        .WithMany("BookingDetail")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailStaff", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.BookingDetail", "BookingDetail")
                        .WithMany("BookingDetailStaff")
                        .HasForeignKey("BookingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Staff", "Staff")
                        .WithMany("BookingDetailStaff")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingDetail");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Package", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Admin", "Admin")
                        .WithMany("Package")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PackageService", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Package", "Package")
                        .WithMany("PackageService")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Service", "Service")
                        .WithMany("PackageService")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Booking", "Booking")
                        .WithMany("PaymentMethod")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.ReportWork", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Staff", "Staff")
                        .WithMany("ReportWork")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Service", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Category", "Category")
                        .WithMany("Service")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Staff", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Role", "Role")
                        .WithMany("Staff")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Student", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.FeedBack", "FeedBack")
                        .WithOne("Students")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.Student", "FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Role", "Role")
                        .WithMany("Student")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedBack");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Admin", b =>
                {
                    b.Navigation("Package");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Apartment", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDetail");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetail", b =>
                {
                    b.Navigation("AttendReport");

                    b.Navigation("BookingDetailStaff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Category", b =>
                {
                    b.Navigation("Service");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.FeedBack", b =>
                {
                    b.Navigation("AttendReports")
                        .IsRequired();

                    b.Navigation("Students")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Package", b =>
                {
                    b.Navigation("BookingDetail");

                    b.Navigation("PackageService");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Region", b =>
                {
                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.ReportWork", b =>
                {
                    b.Navigation("AttendReport");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Role", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Service", b =>
                {
                    b.Navigation("PackageService");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Staff", b =>
                {
                    b.Navigation("BookingDetailStaff");

                    b.Navigation("ReportWork");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Student", b =>
                {
                    b.Navigation("Apartment");
                });
#pragma warning restore 612, 618
        }
    }
}
