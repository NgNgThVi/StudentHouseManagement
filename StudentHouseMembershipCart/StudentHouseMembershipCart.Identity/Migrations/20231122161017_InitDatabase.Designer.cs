// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentHouseMembershipCart.Identity.DbContext;

#nullable disable

namespace StudentHouseMembershipCart.Identity.Migrations
{
    [DbContext(typeof(StudentHouseMembershipCartDatabaseContext))]
    [Migration("20231122161017_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ROLE1",
                            ConcurrencyStamp = "79bb17fc-503d-4eb2-a8b5-cb9a4bd811e5",
                            Name = "Student",
                            NormalizedName = "Student"
                        },
                        new
                        {
                            Id = "ROLE2",
                            ConcurrencyStamp = "69a0c716-f71f-4352-b72d-d5c445586673",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        },
                        new
                        {
                            Id = "ROLE3",
                            ConcurrencyStamp = "5f7b6c26-c87f-4a44-85c9-e68c87217018",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ACCOUNT1",
                            RoleId = "ROLE1"
                        },
                        new
                        {
                            UserId = "ACCOUNT2",
                            RoleId = "ROLE2"
                        },
                        new
                        {
                            UserId = "ACCOUNT3",
                            RoleId = "ROLE3"
                        },
                        new
                        {
                            UserId = "ACCOUNT9",
                            RoleId = "ROLE1"
                        },
                        new
                        {
                            UserId = "ACCOUNT10",
                            RoleId = "ROLE1"
                        },
                        new
                        {
                            UserId = "ACCOUNT11",
                            RoleId = "ROLE1"
                        },
                        new
                        {
                            UserId = "ACCOUNT7",
                            RoleId = "ROLE2"
                        },
                        new
                        {
                            UserId = "ACCOUNT6",
                            RoleId = "ROLE2"
                        },
                        new
                        {
                            UserId = "ACCOUNT5",
                            RoleId = "ROLE2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90ca347f-831f-4b75-98bb-ae825b3efc15"),
                            AdminName = "Admin",
                            ApplicationUserId = "ACCOUNT4",
                            Created = new DateTime(2023, 11, 22, 23, 10, 17, 11, DateTimeKind.Local).AddTicks(4247),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.AttendReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AttendenceStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("BookingDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingDetailOfPakcageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingDetailOfServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDoPackage")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingDetailOfPakcageId");

                    b.HasIndex("BookingDetailOfServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AttendReport");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentNewId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusContract")
                        .HasColumnType("int");

                    b.Property<double>("TotalPay")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("PaymentNewId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailOfPakcage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BookingDetailStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRe_Newed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityOfPackageOrdered")
                        .HasColumnType("int");

                    b.Property<int>("RemainingTaskDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RenewStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPriceOfQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("PackageId");

                    b.ToTable("BookingDetailOfPakcage");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailOfService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BookingDetailStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRe_Newed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityOfPackageOrdered")
                        .HasColumnType("int");

                    b.Property<int>("RemainingTaskDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RenewStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPriceOfQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("PackageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("BookingDetailOfService");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingDetailOfPakcageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingDetailOfServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingDetailOfPakcageId");

                    b.HasIndex("BookingDetailOfServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("BookingDetailStaff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBackDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedBackStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttendReportId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBack");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayDoServiceInWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPerWeekDoPackage")
                        .HasColumnType("int");

                    b.Property<string>("PackageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalOriginalPrice")
                        .HasColumnType("float");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("WeekNumberBooking")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PackageService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QuantityOfService")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PackageService");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PaymentNew", b =>
                {
                    b.Property<string>("PaymentNewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDestinationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentRefId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RequiredAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentNewId");

                    b.ToTable("PaymentNew");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentNewId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TranAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TranDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranRefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentNewId");

                    b.ToTable("PaymentTransaction");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.ReportWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternativeReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AttendReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionProcess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffSubstitableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("WorkingDayExpect")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkingDayReport")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkingStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttendReportId");

                    b.HasIndex("StaffId");

                    b.ToTable("ReportWork");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("OriginalPrice")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("staffName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d36a73ed-78ae-46af-befd-7b90cbcfc479"),
                            Address = "Dong Nai",
                            ApplicationUserId = "ACCOUNT5",
                            Birthday = new DateTime(1999, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 22, 23, 10, 17, 88, DateTimeKind.Local).AddTicks(6261),
                            IsDelete = false,
                            staffName = "Staff 1"
                        },
                        new
                        {
                            Id = new Guid("c085539d-76bd-4fe8-9444-12c21de6610b"),
                            Address = "An Giang",
                            ApplicationUserId = "ACCOUNT6",
                            Birthday = new DateTime(1990, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 22, 23, 10, 17, 88, DateTimeKind.Local).AddTicks(6364),
                            IsDelete = false,
                            staffName = "Staff 2"
                        },
                        new
                        {
                            Id = new Guid("a8ded7dd-683f-4231-8c47-560375560eea"),
                            Address = "Long An",
                            ApplicationUserId = "ACCOUNT7",
                            Birthday = new DateTime(2000, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 22, 23, 10, 17, 88, DateTimeKind.Local).AddTicks(6372),
                            IsDelete = false,
                            staffName = "Staff 3"
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.StaffCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffCategory");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9589c1a-3cbc-4215-bb84-b8fa7d719420"),
                            Address = "Đà Nẵng",
                            ApplicationUserId = "ACCOUNT9",
                            Birthday = new DateTime(2023, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 22, 23, 10, 17, 88, DateTimeKind.Local).AddTicks(6555),
                            IsDelete = false,
                            Phone = "0961868641"
                        },
                        new
                        {
                            Id = new Guid("b9cf3487-3d04-4cbf-85b7-e33360566485"),
                            Address = "Hồ Chí Minh",
                            ApplicationUserId = "ACCOUNT10",
                            Birthday = new DateTime(2023, 11, 22, 23, 10, 17, 88, DateTimeKind.Local).AddTicks(6570),
                            Created = new DateTime(2023, 11, 22, 23, 10, 17, 88, DateTimeKind.Local).AddTicks(6568),
                            IsDelete = false,
                            Phone = "0312357823"
                        },
                        new
                        {
                            Id = new Guid("46f50a4a-327e-47f1-a43c-d31b6b39b939"),
                            Address = "Hà Nội",
                            ApplicationUserId = "ACCOUNT11",
                            Birthday = new DateTime(2023, 11, 22, 23, 10, 17, 88, DateTimeKind.Local).AddTicks(6577),
                            Created = new DateTime(2023, 11, 22, 23, 10, 17, 88, DateTimeKind.Local).AddTicks(6575),
                            IsDelete = false,
                            Phone = "0987451632"
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ACCOUNT1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "481230e2-a960-43b3-914b-3e2582080363",
                            Email = "vi@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Vi",
                            LockoutEnabled = false,
                            NormalizedEmail = "VI@GMAIL.COM",
                            NormalizedUserName = "VI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAG2UFHFVRsBnLmUaLlpInSBXP51YotdxBZ8U1N3ATI6sLMESrmfcqa78gPaW9y4OA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5075bf37-9071-4762-b5dc-be0c6d158584",
                            TwoFactorEnabled = false,
                            UserName = "vi@gmail.com"
                        },
                        new
                        {
                            Id = "ACCOUNT2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d82bd16-d2c1-449a-895c-653cd4f30b21",
                            Email = "nhan@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Nhan",
                            LockoutEnabled = false,
                            NormalizedEmail = "NHAN@GMAIL.COM",
                            NormalizedUserName = "NHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG+GVckM1+jvo6ckZzgM0v9ipFr57O5ym18D3fJVDFdHCdcjlmRfZGSrog31fmbkvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f8d3a6e-2699-4c48-a5e3-30765ba4d34a",
                            TwoFactorEnabled = false,
                            UserName = "nhan@gmail.com"
                        },
                        new
                        {
                            Id = "ACCOUNT3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34e9da6e-c004-4ece-9937-488dc6e5fde5",
                            Email = "dai@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Dai",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAI@GMAIL.COM",
                            NormalizedUserName = "DAI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAwP4WD8WdPhzkLa5SLjnZNmDYO9XZvBZo3KQrJAHltWMqj950Hl/NvTESIyMnXJsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75d81da9-f837-4996-8bb9-8dd425df0078",
                            TwoFactorEnabled = false,
                            UserName = "dai@gmail.com"
                        },
                        new
                        {
                            Id = "ACCOUNT4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfa50544-88bf-4532-b640-d29c8f50bebf",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBAHMuwhDQMyFA7PeZAxCHTaAmpPrCigKIV15Xa301Hz9bg77yyoYpmw0A2BOE8PFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "476aca64-bdea-41a6-882e-1750a218e941",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "ACCOUNT5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ffd3bbe-229b-4ec6-93ed-c4deb6b45b5b",
                            Email = "staff1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "staff",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF1@GMAIL.COM",
                            NormalizedUserName = "STAFF",
                            PasswordHash = "AQAAAAEAACcQAAAAEFOBabw/R7yUlDXI0WaSo1Wn4qFoJn9Ft4K8dOyrWgv0PsEJp4gaVsqGzvxNXd3ENA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1eea645b-e2b2-4d53-9d83-186da88499c9",
                            TwoFactorEnabled = false,
                            UserName = "staff"
                        },
                        new
                        {
                            Id = "ACCOUNT6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a84e6e1-eaf9-483e-b524-00e30b9850ef",
                            Email = "staff2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "staff2",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF2@GMAIL.COM",
                            NormalizedUserName = "STAFF2",
                            PasswordHash = "AQAAAAEAACcQAAAAEMuzjHjpW4qT7tcL+N1iMoUn0eITm4qmMRFXHY6a6C3nD5sq14LWEzT4/Z7wCEHZhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5e8d56a-76bf-4b77-b5f8-18c8b166046e",
                            TwoFactorEnabled = false,
                            UserName = "staff2"
                        },
                        new
                        {
                            Id = "ACCOUNT7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa151d10-07ca-4b0a-9501-a87649cf6e17",
                            Email = "staff3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "staff3",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF3@GMAIL.COM",
                            NormalizedUserName = "STAFF3",
                            PasswordHash = "AQAAAAEAACcQAAAAEFE0T05t4TdMD0nx93lfdtV97BP7CTuSO/MVjIvUoiEQhFskOuJ87Z11XZRUQHiKFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e316836-ac05-4e50-89f7-0bf7151429f6",
                            TwoFactorEnabled = false,
                            UserName = "staff3"
                        },
                        new
                        {
                            Id = "ACCOUNT9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7becc896-823a-4a54-a22b-bb855043faa9",
                            Email = "student1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "student1",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@GMAIL.COM",
                            NormalizedUserName = "STUDENT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEFx+2x5c3qGP2wTvaPVbjM8SYiEi6C+ME8TowcVwD5v7hUcmeGk/LD5asVgUuULJBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ee2a550-4b8e-4902-9f44-56bb5f11b072",
                            TwoFactorEnabled = false,
                            UserName = "student1"
                        },
                        new
                        {
                            Id = "ACCOUNT10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21ba8286-f383-4f62-9d95-379561277e4c",
                            Email = "student2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "student2",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@GMAIL.COM",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHTGjQojEgQERkJmrJpjMzty/HCkG3Okzbh5xZugx/hKddOqHVNos1qt9sNfAf1dRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89a0254e-5b17-4422-937e-a79a9e2792e0",
                            TwoFactorEnabled = false,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = "ACCOUNT11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f872b994-580b-4cbf-97d0-1e38f22b689c",
                            Email = "student3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "student3",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@GMAIL.COM",
                            NormalizedUserName = "STUDENT3",
                            PasswordHash = "AQAAAAEAACcQAAAAEK5Xl85V2pja2ZpB8AqAVGYFXcF8vhvuPewzBuOByo7XyfbtwdYqaAig2cU7jTxIJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c12a1b1a-bdc0-46d2-a0a1-9bc32767e23f",
                            TwoFactorEnabled = false,
                            UserName = "student3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Admin", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Admin")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.Admin", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Apartment", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Region", "Region")
                        .WithMany("Apartment")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Student", "Student")
                        .WithMany("Apartment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.AttendReport", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.BookingDetailOfPakcage", null)
                        .WithMany("AttendReport")
                        .HasForeignKey("BookingDetailOfPakcageId");

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.BookingDetailOfService", null)
                        .WithMany("AttendReport")
                        .HasForeignKey("BookingDetailOfServiceId");

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Booking", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Apartment", "Apartment")
                        .WithMany("Booking")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.PaymentNew", "PaymentNew")
                        .WithMany()
                        .HasForeignKey("PaymentNewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("PaymentNew");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailOfPakcage", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDetailOfPakcage")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Package", "Package")
                        .WithMany("BookingDetailOfPakcage")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailOfService", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDetailOfService")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Package", null)
                        .WithMany("BookingDetailOfService")
                        .HasForeignKey("PackageId");

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailStaff", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.BookingDetailOfPakcage", null)
                        .WithMany("BookingDetailStaff")
                        .HasForeignKey("BookingDetailOfPakcageId");

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.BookingDetailOfService", null)
                        .WithMany("BookingDetailStaff")
                        .HasForeignKey("BookingDetailOfServiceId");

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Staff", "Staff")
                        .WithMany("BookingDetailStaff")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.AttendReport", "AttendReports")
                        .WithOne("FeedBack")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.FeedBack", "AttendReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Student", "Students")
                        .WithMany("FeedBack")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendReports");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PackageService", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Package", "Package")
                        .WithMany("PackageService")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Service", "Service")
                        .WithMany("PackageService")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.PaymentNew", "PaymentNew")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("PaymentNewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentNew");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.ReportWork", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.AttendReport", "AttendReport")
                        .WithMany()
                        .HasForeignKey("AttendReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Staff", "Staff")
                        .WithMany("ReportWork")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendReport");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Service", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Category", "Category")
                        .WithMany("Service")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Staff", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Staff")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.Staff", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.StaffCategory", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Category", "Category")
                        .WithMany("StaffCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Staff", "Staff")
                        .WithMany("StaffCategories")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Student", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Student")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.Student", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Apartment", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.AttendReport", b =>
                {
                    b.Navigation("FeedBack")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDetailOfPakcage");

                    b.Navigation("BookingDetailOfService");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailOfPakcage", b =>
                {
                    b.Navigation("AttendReport");

                    b.Navigation("BookingDetailStaff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailOfService", b =>
                {
                    b.Navigation("AttendReport");

                    b.Navigation("BookingDetailStaff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Category", b =>
                {
                    b.Navigation("Service");

                    b.Navigation("StaffCategories");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Package", b =>
                {
                    b.Navigation("BookingDetailOfPakcage");

                    b.Navigation("BookingDetailOfService");

                    b.Navigation("PackageService");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PaymentNew", b =>
                {
                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Region", b =>
                {
                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Service", b =>
                {
                    b.Navigation("PackageService");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Staff", b =>
                {
                    b.Navigation("BookingDetailStaff");

                    b.Navigation("ReportWork");

                    b.Navigation("StaffCategories");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Student", b =>
                {
                    b.Navigation("Apartment");

                    b.Navigation("FeedBack");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
