// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentHouseMembershipCart.Identity.DbContext;

#nullable disable

namespace StudentHouseMembershipCart.Identity.Migrations
{
    [DbContext(typeof(StudentHouseMembershipCartDatabaseContext))]
    [Migration("20231015175620_3")]
    partial class _3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ROLE1",
                            ConcurrencyStamp = "b4097b42-e22a-4b47-9d84-6b90ad8c1044",
                            Name = "Student",
                            NormalizedName = "Student"
                        },
                        new
                        {
                            Id = "ROLE2",
                            ConcurrencyStamp = "7d07af2d-873b-430a-80d1-38671255124a",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        },
                        new
                        {
                            Id = "ROLE3",
                            ConcurrencyStamp = "6aa50dd3-1387-4840-8fbe-dfe8671a37b7",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ACCOUNT1",
                            RoleId = "ROLE1"
                        },
                        new
                        {
                            UserId = "ACCOUNT2",
                            RoleId = "ROLE2"
                        },
                        new
                        {
                            UserId = "ACCOUNT3",
                            RoleId = "ROLE3"
                        },
                        new
                        {
                            UserId = "ACCOUNT9",
                            RoleId = "ROLE1"
                        },
                        new
                        {
                            UserId = "ACCOUNT10",
                            RoleId = "ROLE1"
                        },
                        new
                        {
                            UserId = "ACCOUNT11",
                            RoleId = "ROLE1"
                        },
                        new
                        {
                            UserId = "ACCOUNT7",
                            RoleId = "ROLE2"
                        },
                        new
                        {
                            UserId = "ACCOUNT6",
                            RoleId = "ROLE2"
                        },
                        new
                        {
                            UserId = "ACCOUNT5",
                            RoleId = "ROLE2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90ca347f-831f-4b75-98bb-ae825b3efc15"),
                            AdminName = "Admin",
                            ApplicationUserId = "ACCOUNT4",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 218, DateTimeKind.Local).AddTicks(8926),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Apartment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9388a4e7-ae81-40d4-834c-463cfccb6f53"),
                            Address = "286,phuong 24, quan Hai Ba Trung, Ha Noi",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7630),
                            IsDelete = false,
                            RegionId = new Guid("bd3db160-9064-458b-9974-aeaa876d1ef4"),
                            StudentId = new Guid("f9589c1a-3cbc-4215-bb84-b8fa7d719420")
                        },
                        new
                        {
                            Id = new Guid("ee8bd315-0201-46db-bcab-b1292f97e91d"),
                            Address = "176, phuong 26, quan Binh Thanh, TP.HCM",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7655),
                            IsDelete = false,
                            RegionId = new Guid("3a60f12a-8c9a-4985-a215-0c55438f363b"),
                            StudentId = new Guid("b9cf3487-3d04-4cbf-85b7-e33360566485")
                        },
                        new
                        {
                            Id = new Guid("81f9a432-7e27-4b3e-a354-dfaf3f1c164c"),
                            Address = "145, phuong 5, quan Hoan Kiem, Ha Noi",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7659),
                            IsDelete = false,
                            RegionId = new Guid("34303ccb-2c3e-4cee-84f3-b3352d67d790"),
                            StudentId = new Guid("46f50a4a-327e-47f1-a43c-d31b6b39b939")
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.AttendReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AttendenceStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("BookingDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDoPackage")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingDetailId");

                    b.ToTable("AttendReport");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9a5af9c-ce76-43ab-9fc4-46442e495f59"),
                            BookingDetailId = new Guid("2408cc34-d225-448e-979e-014d1ec860a3"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7787),
                            DateDoPackage = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7788),
                            IsDelete = false,
                            ReportWorkId = new Guid("120e1aaa-eed0-445f-943a-20bc12f4b883")
                        },
                        new
                        {
                            Id = new Guid("275b2720-420d-4b33-835a-4651d92f1390"),
                            BookingDetailId = new Guid("be08997c-61a5-4859-98a2-459c93dca574"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7791),
                            DateDoPackage = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7792),
                            IsDelete = false,
                            ReportWorkId = new Guid("b1bcf1d6-5b2e-43dd-8645-6738d6787924")
                        },
                        new
                        {
                            Id = new Guid("046b87c6-e4b5-4f08-9951-9ebf4bc20993"),
                            BookingDetailId = new Guid("a2a79fb8-a2f5-4f98-9b36-22eeb1a1215c"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7796),
                            DateDoPackage = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7797),
                            IsDelete = false,
                            ReportWorkId = new Guid("e104a356-2baf-4bf9-a3d8-b1463352c3e7")
                        },
                        new
                        {
                            Id = new Guid("742a0cf9-14ae-47ac-963b-03a096ef80a2"),
                            BookingDetailId = new Guid("1f4d83e2-3713-4fff-9fc5-5373c20cc2cc"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7799),
                            DateDoPackage = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7800),
                            IsDelete = false,
                            ReportWorkId = new Guid("991b3ff2-962f-439a-aec6-051d522a8904")
                        },
                        new
                        {
                            Id = new Guid("ccba7e84-40ed-4d32-b98f-e3e5181a924f"),
                            BookingDetailId = new Guid("cd4de656-dbfe-4797-8f8d-130ded6a6774"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7802),
                            DateDoPackage = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(7803),
                            IsDelete = false,
                            ReportWorkId = new Guid("6323937a-3b10-4277-8d7b-e61368bd8cf9")
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusContract")
                        .HasColumnType("int");

                    b.Property<double>("TotalPay")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Booking");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c5bccd4-56b6-4b76-8d5b-888872a8b71f"),
                            ApartmentId = new Guid("9388a4e7-ae81-40d4-834c-463cfccb6f53"),
                            Contract = "Hợp đồng Rửa xe",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8090),
                            IsDelete = false,
                            StartDate = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8093),
                            TotalPay = 1234.5
                        },
                        new
                        {
                            Id = new Guid("256fa734-309c-44a9-af6a-8a97866fbff5"),
                            ApartmentId = new Guid("ee8bd315-0201-46db-bcab-b1292f97e91d"),
                            Contract = "Hợp đồng giặt đồ",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8096),
                            IsDelete = false,
                            StartDate = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8098),
                            TotalPay = 1222.5
                        },
                        new
                        {
                            Id = new Guid("85d3da16-8f33-4c96-9792-1e6e17d3ecc8"),
                            ApartmentId = new Guid("81f9a432-7e27-4b3e-a354-dfaf3f1c164c"),
                            Contract = "Hợp đồng dọn vệ sinh nhà cửa",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8099),
                            IsDelete = false,
                            StartDate = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8100),
                            TotalPay = 2233.3000000000002
                        },
                        new
                        {
                            Id = new Guid("a39735c8-440d-440f-9a5f-932164975749"),
                            ApartmentId = new Guid("9388a4e7-ae81-40d4-834c-463cfccb6f53"),
                            Contract = "Hợp đồng dịch vụ hỗ trợ tài chính",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8102),
                            IsDelete = false,
                            StartDate = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8103),
                            TotalPay = 2233.3000000000002
                        },
                        new
                        {
                            Id = new Guid("3533264c-3bdd-4744-9023-481f5ec99cd6"),
                            ApartmentId = new Guid("ee8bd315-0201-46db-bcab-b1292f97e91d"),
                            Contract = "Hợp đồng vận chuyển đồ",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8105),
                            IsDelete = false,
                            StartDate = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8107),
                            TotalPay = 2233.3000000000002
                        },
                        new
                        {
                            Id = new Guid("ce7fdf8d-c130-4e5c-b2f4-6199153a5926"),
                            ApartmentId = new Guid("81f9a432-7e27-4b3e-a354-dfaf3f1c164c"),
                            Contract = "Hợp đồng nấu ăn cho em",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8109),
                            IsDelete = false,
                            StartDate = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8111),
                            TotalPay = 2233.3000000000002
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BookingDetailStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRe_Newed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityOfPackageOrdered")
                        .HasColumnType("int");

                    b.Property<int>("RemainingTaskDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RenewStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPriceOfQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("PackageId");

                    b.ToTable("BookingDetail");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be08997c-61a5-4859-98a2-459c93dca574"),
                            BookingId = new Guid("8c5bccd4-56b6-4b76-8d5b-888872a8b71f"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8249),
                            IsDelete = false,
                            IsRe_Newed = true,
                            PackageId = new Guid("68e3bf2b-2bd7-4428-ac39-148f1a186cba"),
                            QuantityOfPackageOrdered = 0,
                            RemainingTaskDuration = 1,
                            TotalPriceOfQuantity = 2222.1999999999998
                        },
                        new
                        {
                            Id = new Guid("035c6d92-8fb5-4635-8acf-1821e7296dae"),
                            BookingId = new Guid("256fa734-309c-44a9-af6a-8a97866fbff5"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8254),
                            IsDelete = false,
                            IsRe_Newed = true,
                            PackageId = new Guid("c0e52326-c1c2-4c58-a5d9-d6a768e0c7a9"),
                            QuantityOfPackageOrdered = 0,
                            RemainingTaskDuration = 2,
                            TotalPriceOfQuantity = 3333.3000000000002
                        },
                        new
                        {
                            Id = new Guid("2408cc34-d225-448e-979e-014d1ec860a3"),
                            BookingId = new Guid("85d3da16-8f33-4c96-9792-1e6e17d3ecc8"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8261),
                            IsDelete = false,
                            IsRe_Newed = true,
                            PackageId = new Guid("d0e4fc80-5e14-4f54-b3d3-90fff85df063"),
                            QuantityOfPackageOrdered = 0,
                            RemainingTaskDuration = 3,
                            TotalPriceOfQuantity = 3232.3000000000002
                        },
                        new
                        {
                            Id = new Guid("cd4de656-dbfe-4797-8f8d-130ded6a6774"),
                            BookingId = new Guid("a39735c8-440d-440f-9a5f-932164975749"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8265),
                            IsDelete = false,
                            IsRe_Newed = true,
                            PackageId = new Guid("649ce925-0cd1-4cb2-9fb2-4c6ae8ff521e"),
                            QuantityOfPackageOrdered = 0,
                            RemainingTaskDuration = 3,
                            TotalPriceOfQuantity = 3232.3000000000002
                        },
                        new
                        {
                            Id = new Guid("a2a79fb8-a2f5-4f98-9b36-22eeb1a1215c"),
                            BookingId = new Guid("ce7fdf8d-c130-4e5c-b2f4-6199153a5926"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8270),
                            IsDelete = false,
                            IsRe_Newed = true,
                            PackageId = new Guid("68e3bf2b-2bd7-4428-ac39-148f1a186cba"),
                            QuantityOfPackageOrdered = 0,
                            RemainingTaskDuration = 3,
                            TotalPriceOfQuantity = 3232.3000000000002
                        },
                        new
                        {
                            Id = new Guid("1f4d83e2-3713-4fff-9fc5-5373c20cc2cc"),
                            BookingId = new Guid("3533264c-3bdd-4744-9023-481f5ec99cd6"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8316),
                            IsDelete = false,
                            IsRe_Newed = true,
                            PackageId = new Guid("b17c9d4c-b164-4097-8d5f-03d2246da758"),
                            QuantityOfPackageOrdered = 0,
                            RemainingTaskDuration = 3,
                            TotalPriceOfQuantity = 3232.3000000000002
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingDetailId");

                    b.HasIndex("StaffId");

                    b.ToTable("BookingDetailStaff");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0dadafe5-5135-4332-a0e8-2731e23f4497"),
                            BookingDetailId = new Guid("be08997c-61a5-4859-98a2-459c93dca574"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8431),
                            IsDelete = false,
                            StaffId = new Guid("d36a73ed-78ae-46af-befd-7b90cbcfc479")
                        },
                        new
                        {
                            Id = new Guid("0d4fca14-05d7-4d58-aa81-a53878f1dbc0"),
                            BookingDetailId = new Guid("035c6d92-8fb5-4635-8acf-1821e7296dae"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8436),
                            IsDelete = false,
                            StaffId = new Guid("c085539d-76bd-4fe8-9444-12c21de6610b")
                        },
                        new
                        {
                            Id = new Guid("3935626a-42b6-4d31-b71b-66d3e8e57e73"),
                            BookingDetailId = new Guid("2408cc34-d225-448e-979e-014d1ec860a3"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8439),
                            IsDelete = false,
                            StaffId = new Guid("a8ded7dd-683f-4231-8c47-560375560eea")
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8abb3dda-208b-4397-93c0-3a5269a90e3d"),
                            CategoryName = "Rửa xe",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8544),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("9df988f5-0382-4939-8eee-09d47b182bbb"),
                            CategoryName = "Nấu ăn cho em",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8550),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("375a894d-e8e5-4a84-a0b8-09f907992b46"),
                            CategoryName = "Shipping",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8552),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("8940e7f6-fd91-4402-a515-b9d55448c522"),
                            CategoryName = "hỗ trợ tài chính",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8554),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("21291667-7546-4825-9bad-840d648900a3"),
                            CategoryName = "dọn vệ sinh nhà cửa",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8557),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("ba0f3f23-9425-44ad-9d73-a7608381fd5f"),
                            CategoryName = "Bảo trì và sửa chữa",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8558),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("a3ccb973-d6c4-4ef4-ae4b-36a97429a0b0"),
                            CategoryName = "Giặt đồ",
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8560),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBackDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttendReportId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("FeedBack");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2372f547-375e-4f88-a726-37643180c585"),
                            AttendReportId = new Guid("d9a5af9c-ce76-43ab-9fc4-46442e495f59"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8664),
                            FeedBackDescription = "dọn dẹp cực kì có tâm, lao nhà quá sạch, đi muốn té tét đầu",
                            FeedBackImage = "/url/asdas/sadas",
                            FeedBackName = "Feedback dọn dẹp nhà cửa của căn hộ 0504 vinhomes",
                            FeedBackRating = "5 sao",
                            IsDelete = false,
                            StudentId = new Guid("f9589c1a-3cbc-4215-bb84-b8fa7d719420")
                        },
                        new
                        {
                            Id = new Guid("fc2e4d71-9e75-40d9-972c-a36ecad80887"),
                            AttendReportId = new Guid("275b2720-420d-4b33-835a-4651d92f1390"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8670),
                            FeedBackDescription = "Rửa xe sạch bon bon, soi thấy cục mụn, nhưng bơm bánh xe hơi căng",
                            FeedBackImage = "/url/asdas/sadas",
                            FeedBackName = "Feedback rửa xe máy winner X của a Vĩ",
                            FeedBackRating = "4,5 sao",
                            IsDelete = false,
                            StudentId = new Guid("f9589c1a-3cbc-4215-bb84-b8fa7d719420")
                        },
                        new
                        {
                            Id = new Guid("0730329f-ebcb-484d-8dd0-e32bb3de78a4"),
                            AttendReportId = new Guid("046b87c6-e4b5-4f08-9951-9ebf4bc20993"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8677),
                            FeedBackDescription = "Cơm cô 3 và chị 7 nấu rất là ngon và trắng, nói chung tuyệt cú mèo",
                            FeedBackImage = "/url/asdas/sadas",
                            FeedBackName = "Feedback nấu ăn cho em",
                            FeedBackRating = "5 sao",
                            IsDelete = false,
                            StudentId = new Guid("b9cf3487-3d04-4cbf-85b7-e33360566485")
                        },
                        new
                        {
                            Id = new Guid("53838b2b-a19f-422a-8f62-6363476c21da"),
                            AttendReportId = new Guid("742a0cf9-14ae-47ac-963b-03a096ef80a2"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8680),
                            FeedBackDescription = "vận chuyển đúng thời gian và quy định của kí túc xá, Quá đã pepsi ơi!!!",
                            FeedBackImage = "/url/asdas/sadas",
                            FeedBackName = "Feedback chuyển nhà cho sinh viên nghèo vượt khó",
                            FeedBackRating = "4 sao",
                            IsDelete = false,
                            StudentId = new Guid("46f50a4a-327e-47f1-a43c-d31b6b39b939")
                        },
                        new
                        {
                            Id = new Guid("6863f4fb-eef5-4f26-8fcf-8736aa8ade95"),
                            AttendReportId = new Guid("ccba7e84-40ed-4d32-b98f-e3e5181a924f"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8683),
                            FeedBackDescription = "Quả thật là vị cứu tinh đúng nghĩa, 10 điểm không có nhưng",
                            FeedBackImage = "/url/asdas/sadas",
                            FeedBackName = "Feedback hỗ trợ tài chánh cho sinh viên nghiện.",
                            FeedBackRating = "5 sao",
                            IsDelete = false,
                            StudentId = new Guid("b9cf3487-3d04-4cbf-85b7-e33360566485")
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayDoServiceInWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPerWeekDoPackage")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("WeekNumberBooking")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Package");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee75ea18-f6a7-4025-84b7-588ab1c6bf2d"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8806),
                            DayDoServiceInWeek = "26",
                            IsDelete = false,
                            NumberOfPerWeekDoPackage = 2,
                            PackageName = "Maintenance & Repairs normal Package",
                            TotalPrice = 0.0,
                            WeekNumberBooking = 6
                        },
                        new
                        {
                            Id = new Guid("68e3bf2b-2bd7-4428-ac39-148f1a186cba"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8814),
                            DayDoServiceInWeek = "5",
                            IsDelete = false,
                            NumberOfPerWeekDoPackage = 1,
                            PackageName = "Nấu ăn package",
                            TotalPrice = 0.0,
                            WeekNumberBooking = 1
                        },
                        new
                        {
                            Id = new Guid("649ce925-0cd1-4cb2-9fb2-4c6ae8ff521e"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8817),
                            DayDoServiceInWeek = "5",
                            IsDelete = false,
                            NumberOfPerWeekDoPackage = 1,
                            PackageName = "Hỗ trợ tài chính vippro package",
                            TotalPrice = 0.0,
                            WeekNumberBooking = 1
                        },
                        new
                        {
                            Id = new Guid("4da4e6ad-3328-4f03-964e-c31e1a8421f3"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8820),
                            DayDoServiceInWeek = "4",
                            IsDelete = false,
                            NumberOfPerWeekDoPackage = 1,
                            PackageName = "Rửa xe premium package",
                            TotalPrice = 0.0,
                            WeekNumberBooking = 1
                        },
                        new
                        {
                            Id = new Guid("c0e52326-c1c2-4c58-a5d9-d6a768e0c7a9"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8824),
                            DayDoServiceInWeek = "2",
                            IsDelete = false,
                            NumberOfPerWeekDoPackage = 1,
                            PackageName = "Giặt đồ package",
                            TotalPrice = 0.0,
                            WeekNumberBooking = 1
                        },
                        new
                        {
                            Id = new Guid("d0e4fc80-5e14-4f54-b3d3-90fff85df063"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8829),
                            DayDoServiceInWeek = "25",
                            IsDelete = false,
                            NumberOfPerWeekDoPackage = 2,
                            PackageName = "Dọn vệ sinh nhà cửa package",
                            TotalPrice = 0.0,
                            WeekNumberBooking = 6
                        },
                        new
                        {
                            Id = new Guid("b17c9d4c-b164-4097-8d5f-03d2246da758"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(8831),
                            DayDoServiceInWeek = "37",
                            IsDelete = false,
                            NumberOfPerWeekDoPackage = 2,
                            PackageName = "Vận chuyên giao vận package",
                            TotalPrice = 0.0,
                            WeekNumberBooking = 6
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PackageService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PackageService");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d036463d-887e-4a3c-aaab-4fce577e43db"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9042),
                            IsDelete = false,
                            PackageId = new Guid("c0e52326-c1c2-4c58-a5d9-d6a768e0c7a9"),
                            ServiceId = new Guid("e430fcfb-de6a-4c64-a6ca-b607e1357843")
                        },
                        new
                        {
                            Id = new Guid("95786a5f-3068-4628-ad2f-2bcc70de8661"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9047),
                            IsDelete = false,
                            PackageId = new Guid("d0e4fc80-5e14-4f54-b3d3-90fff85df063"),
                            ServiceId = new Guid("30743744-754b-4a87-b828-6186ccc7ece6")
                        },
                        new
                        {
                            Id = new Guid("fc2c6cbb-1d78-48e4-be82-fc2870275030"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9051),
                            IsDelete = false,
                            PackageId = new Guid("4da4e6ad-3328-4f03-964e-c31e1a8421f3"),
                            ServiceId = new Guid("fa87282b-0c28-4dc7-831d-e1d8f8026270")
                        },
                        new
                        {
                            Id = new Guid("b7a93559-d76d-40f3-973e-b550dbc8ad74"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9055),
                            IsDelete = false,
                            PackageId = new Guid("649ce925-0cd1-4cb2-9fb2-4c6ae8ff521e"),
                            ServiceId = new Guid("29140864-8e89-41b6-8fd7-a440800e6e00")
                        },
                        new
                        {
                            Id = new Guid("d42d5044-1e4e-4c77-8e6e-0fae60ad1d17"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9060),
                            IsDelete = false,
                            PackageId = new Guid("ee75ea18-f6a7-4025-84b7-588ab1c6bf2d"),
                            ServiceId = new Guid("4fcc0684-ad33-433f-9338-d9e949b6f0d8")
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd3db160-9064-458b-9974-aeaa876d1ef4"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9170),
                            IsDelete = false,
                            RegionName = "Quận 8"
                        },
                        new
                        {
                            Id = new Guid("3a60f12a-8c9a-4985-a215-0c55438f363b"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9176),
                            IsDelete = false,
                            RegionName = "Dong Nai"
                        },
                        new
                        {
                            Id = new Guid("34303ccb-2c3e-4cee-84f3-b3352d67d790"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9178),
                            IsDelete = false,
                            RegionName = "Quan Binh Thanh"
                        },
                        new
                        {
                            Id = new Guid("6db6d0cf-a3a4-4c12-8f0d-41c4ff579ae6"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9180),
                            IsDelete = false,
                            RegionName = "Quận 11"
                        },
                        new
                        {
                            Id = new Guid("62f16917-b22a-4b17-b93d-5a9f35c5b8f4"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9183),
                            IsDelete = false,
                            RegionName = "Quận 12"
                        },
                        new
                        {
                            Id = new Guid("83326cb5-b249-4ba3-aa98-87752a99df53"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9186),
                            IsDelete = false,
                            RegionName = "Hóc Môn"
                        },
                        new
                        {
                            Id = new Guid("006aeb5a-7574-40ca-a73e-da840eceb810"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9188),
                            IsDelete = false,
                            RegionName = "Quận 1"
                        },
                        new
                        {
                            Id = new Guid("2bb177e5-2180-4ce0-bbf2-af5bc9eeefcc"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9189),
                            IsDelete = false,
                            RegionName = "Quận 2"
                        },
                        new
                        {
                            Id = new Guid("3b0ab201-058e-4314-8b5c-df3c7d831ddc"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9192),
                            IsDelete = false,
                            RegionName = "Quận 3"
                        },
                        new
                        {
                            Id = new Guid("9ffbfc1a-45d7-42d1-b216-00f328fe1638"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9196),
                            IsDelete = false,
                            RegionName = "Quận 9"
                        },
                        new
                        {
                            Id = new Guid("2429516b-5620-4838-912f-f4826f5d28bd"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9197),
                            IsDelete = false,
                            RegionName = "Quận 7"
                        },
                        new
                        {
                            Id = new Guid("8725e1c4-e76b-4563-916b-a668516237e2"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9199),
                            IsDelete = false,
                            RegionName = "Quận 4"
                        },
                        new
                        {
                            Id = new Guid("0dbd39f5-cd9b-4e7f-8d53-851014a4efa0"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9201),
                            IsDelete = false,
                            RegionName = "Quận 5"
                        },
                        new
                        {
                            Id = new Guid("fc4cfb1b-063e-4f31-b25f-b0853a401350"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9205),
                            IsDelete = false,
                            RegionName = "Quận 6"
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.ReportWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionProcess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("WorkingDay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttendReportId")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("ReportWork");

                    b.HasData(
                        new
                        {
                            Id = new Guid("991b3ff2-962f-439a-aec6-051d522a8904"),
                            AttendReportId = new Guid("742a0cf9-14ae-47ac-963b-03a096ef80a2"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9335),
                            DescriptionProcess = "Giao hàng đến 123/8 Long Thạnh Mỹ, Quận 9. Thành Công!!!",
                            Image = "abc",
                            IsDelete = false,
                            StaffId = new Guid("d36a73ed-78ae-46af-befd-7b90cbcfc479"),
                            WorkingDay = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("120e1aaa-eed0-445f-943a-20bc12f4b883"),
                            AttendReportId = new Guid("d9a5af9c-ce76-43ab-9fc4-46442e495f59"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9340),
                            DescriptionProcess = "Lau tủ, Lau bếp, Rửa chén. Hoàn Thành",
                            Image = "abc",
                            IsDelete = false,
                            StaffId = new Guid("c085539d-76bd-4fe8-9444-12c21de6610b"),
                            WorkingDay = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bd3d72cc-551a-4abf-b358-d6d980bddb67"),
                            AttendReportId = new Guid("275b2720-420d-4b33-835a-4651d92f1390"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9343),
                            DescriptionProcess = "Sửa ống nước, thay van. Thành công",
                            Image = "abc",
                            IsDelete = false,
                            StaffId = new Guid("a8ded7dd-683f-4231-8c47-560375560eea"),
                            WorkingDay = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa87282b-0c28-4dc7-831d-e1d8f8026270"),
                            CategoryId = new Guid("8abb3dda-208b-4397-93c0-3a5269a90e3d"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9459),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "Làm mới và làm sạch xe máy, lau chùi và bảo dưỡng các bộ phận khác như bánh xe, đèn, và ống xả, xúc bình xăng",
                            ServiceName = "Dịch vụ rửa xe máy"
                        },
                        new
                        {
                            Id = new Guid("9d3a81b8-a470-4f46-861e-772d55d73668"),
                            CategoryId = new Guid("8abb3dda-208b-4397-93c0-3a5269a90e3d"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9464),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "Làm mới và làm sạch xe Hơi, lau chùi và bảo dưỡng các bộ phận khác như bánh xe, đèn, và ống xả",
                            ServiceName = "Dịch vụ rửa xe hơi"
                        },
                        new
                        {
                            Id = new Guid("7635d149-2a74-4562-b779-c81056594bfb"),
                            CategoryId = new Guid("a3ccb973-d6c4-4ef4-ae4b-36a97429a0b0"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9468),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "giặt sạch, làm mềm vải, và bảo quản cẩn thận để duy trì vẻ ngoại hình và chất lượng tốt nhất.",
                            ServiceName = "Giặt áo vest"
                        },
                        new
                        {
                            Id = new Guid("e430fcfb-de6a-4c64-a6ca-b607e1357843"),
                            CategoryId = new Guid("a3ccb973-d6c4-4ef4-ae4b-36a97429a0b0"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9472),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "giặt sạch, làm mềm vải, và bảo quản cẩn thận để duy trì vẻ ngoại hình và chất lượng tốt nhất.",
                            ServiceName = "Giặt quần áo hằng ngày"
                        },
                        new
                        {
                            Id = new Guid("29140864-8e89-41b6-8fd7-a440800e6e00"),
                            CategoryId = new Guid("8940e7f6-fd91-4402-a515-b9d55448c522"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9513),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "Cung cấp giải pháp tài chính linh hoạt cho sinh viên, cho phép họ vay tiền để chi trả học phí, sách vở, chi phí sinh hoạt hàng ngày và các nhu cầu khác liên quan đến việc học tập. Quy trình đơn giản và linh hoạt, cung cấp các lựa chọn vay phù hợp với điều kiện tài chính của sinh viên, giúp họ tiếp cận giáo dục một cách thuận lợi.",
                            ServiceName = "Hỗ trợ vay tiền học"
                        },
                        new
                        {
                            Id = new Guid("a9a16dcf-6c63-4392-9ec2-be727fcd6081"),
                            CategoryId = new Guid("8abb3dda-208b-4397-93c0-3a5269a90e3d"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9517),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "Làm mới và làm sạch xe đạp, bơm bánh xe",
                            ServiceName = "Rửa xe đạp"
                        },
                        new
                        {
                            Id = new Guid("1e064aca-ef1a-4705-9931-a49a807765fd"),
                            CategoryId = new Guid("375a894d-e8e5-4a84-a0b8-09f907992b46"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9522),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "đóng gói, vận chuyển và xếp đặt đồ đạc của sinh viên một cách cẩn thận.",
                            ServiceName = "Chuyển nhà"
                        },
                        new
                        {
                            Id = new Guid("16209d12-4e67-41e5-b419-f3285b8958e6"),
                            CategoryId = new Guid("375a894d-e8e5-4a84-a0b8-09f907992b46"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9525),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "Nước được đóng trong các bình chất lượng cao, đảm bảo vệ sinh và an toàn.",
                            ServiceName = "Giao nước uống"
                        },
                        new
                        {
                            Id = new Guid("fbda5a61-c0e1-4039-97a5-841fb84ec5ce"),
                            CategoryId = new Guid("9df988f5-0382-4939-8eee-09d47b182bbb"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9530),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "đi chợ, mua thực phẩm, chế biến, tính tiền",
                            ServiceName = "Nấu cơm"
                        },
                        new
                        {
                            Id = new Guid("30743744-754b-4a87-b828-6186ccc7ece6"),
                            CategoryId = new Guid("21291667-7546-4825-9bad-840d648900a3"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9533),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "quét nhà, lau nhà, rửa chén, xếp quần áo, đổ rác",
                            ServiceName = "Dọn dẹp nhà cửa"
                        },
                        new
                        {
                            Id = new Guid("4fcc0684-ad33-433f-9338-d9e949b6f0d8"),
                            CategoryId = new Guid("ba0f3f23-9425-44ad-9d73-a7608381fd5f"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9537),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "kiểm tra, xác định và khắc phục vấn đề, Thay van, tra keo",
                            ServiceName = "Sửa ống nước"
                        },
                        new
                        {
                            Id = new Guid("6bbd52b8-a4b7-407e-baba-a4f4fca65d24"),
                            CategoryId = new Guid("ba0f3f23-9425-44ad-9d73-a7608381fd5f"),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9540),
                            Image = "abc",
                            IsDelete = false,
                            Price = 0.0,
                            ServiceDescription = "kiểm tra, xác định và khắc phục vấn đề",
                            ServiceName = "Sửa wifi"
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("staffName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d36a73ed-78ae-46af-befd-7b90cbcfc479"),
                            Address = "Dong Nai",
                            ApplicationUserId = "ACCOUNT5",
                            Birthday = new DateTime(1999, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9665),
                            IsDelete = false,
                            staffName = "Staff 1"
                        },
                        new
                        {
                            Id = new Guid("c085539d-76bd-4fe8-9444-12c21de6610b"),
                            Address = "An Giang",
                            ApplicationUserId = "ACCOUNT6",
                            Birthday = new DateTime(1990, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9736),
                            IsDelete = false,
                            staffName = "Staff 2"
                        },
                        new
                        {
                            Id = new Guid("a8ded7dd-683f-4231-8c47-560375560eea"),
                            Address = "Long An",
                            ApplicationUserId = "ACCOUNT7",
                            Birthday = new DateTime(2000, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9743),
                            IsDelete = false,
                            staffName = "Staff 3"
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.StaffCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffCategory");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9589c1a-3cbc-4215-bb84-b8fa7d719420"),
                            Address = "Đà Nẵng",
                            ApplicationUserId = "ACCOUNT9",
                            Birthday = new DateTime(2023, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9916),
                            IsDelete = false,
                            Phone = "0961868641"
                        },
                        new
                        {
                            Id = new Guid("b9cf3487-3d04-4cbf-85b7-e33360566485"),
                            Address = "Hồ Chí Minh",
                            ApplicationUserId = "ACCOUNT10",
                            Birthday = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9932),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9931),
                            IsDelete = false,
                            Phone = "0312357823"
                        },
                        new
                        {
                            Id = new Guid("46f50a4a-327e-47f1-a43c-d31b6b39b939"),
                            Address = "Hà Nội",
                            ApplicationUserId = "ACCOUNT11",
                            Birthday = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9935),
                            Created = new DateTime(2023, 10, 16, 0, 56, 19, 285, DateTimeKind.Local).AddTicks(9934),
                            IsDelete = false,
                            Phone = "0987451632"
                        });
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ACCOUNT1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39afc473-babd-43ab-bd2c-13fc71087706",
                            Email = "vi@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Vi",
                            LockoutEnabled = false,
                            NormalizedEmail = "VI@GMAIL.COM",
                            NormalizedUserName = "VI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEJGFC8Hqsw/1YOi20Hg9DQjQRkuLzxV4nIvcD5UQZ46+gqQQGWHIuANU59HDLDBKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f26985e-f269-4f33-af53-5f542a0663bb",
                            TwoFactorEnabled = false,
                            UserName = "vi@gmail.com"
                        },
                        new
                        {
                            Id = "ACCOUNT2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f91fd2e-ce76-4740-841d-a0a15fd69c02",
                            Email = "nhan@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Nhan",
                            LockoutEnabled = false,
                            NormalizedEmail = "NHAN@GMAIL.COM",
                            NormalizedUserName = "NHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENexdqqn/k79Sush4zIHQnZ14d6zewAouV0O3RLYSyO0vONzbndDH/rZefpWA16yJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2c1ac0c-57c8-4454-970b-11535701b4b9",
                            TwoFactorEnabled = false,
                            UserName = "nhan@gmail.com"
                        },
                        new
                        {
                            Id = "ACCOUNT3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3889f471-01ad-49b5-8445-e610c066c2cf",
                            Email = "dai@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Dai",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAI@GMAIL.COM",
                            NormalizedUserName = "DAI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEdpdF9V+LAcVWeF0NG5i9uQwtvDSmKaKrF1C1no0LrKUEBgqkwLYTIu+SQNs6KpVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b4c2ce4-2afe-40a5-a237-203ea9956509",
                            TwoFactorEnabled = false,
                            UserName = "dai@gmail.com"
                        },
                        new
                        {
                            Id = "ACCOUNT4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9919412-f008-44b2-b7a5-80924a885e05",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHK2Ant/P3yiKw4dyaw3DOJTxnf4DdUF5ZuN9E7jVbiPn2suzlL1hUmkui+Q3GWzNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fec55b2-90c5-4825-8c2e-6f1d12433608",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "ACCOUNT5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48d51421-669b-418f-8de3-ea52a1449dee",
                            Email = "staff1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "staff",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF1@GMAIL.COM",
                            NormalizedUserName = "STAFF",
                            PasswordHash = "AQAAAAEAACcQAAAAEMDGa6+k5VFvpB3toAOkoZiCP/pK5lEzPS4bP4Vjql7K9bnVfRVvsaCwkLeuvmWEjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0470b777-a063-4735-9f25-88561b291c77",
                            TwoFactorEnabled = false,
                            UserName = "staff"
                        },
                        new
                        {
                            Id = "ACCOUNT6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85ad1dc5-0232-40d1-91f8-091de572909e",
                            Email = "staff2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "staff2",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF2@GMAIL.COM",
                            NormalizedUserName = "STAFF2",
                            PasswordHash = "AQAAAAEAACcQAAAAELHrJuqLRXrqcPxzIzY1o6bnxyRMrnbnpunOOL6e/Z1OyBzQzQtBBUqvVLWL6d8Shw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "902ae5a7-bff7-4b38-a4e2-4eff0106777a",
                            TwoFactorEnabled = false,
                            UserName = "staff2"
                        },
                        new
                        {
                            Id = "ACCOUNT7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "324162c2-c845-4a78-baac-6ff42dd3812c",
                            Email = "staff3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "staff3",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF3@GMAIL.COM",
                            NormalizedUserName = "STAFF3",
                            PasswordHash = "AQAAAAEAACcQAAAAENV630Q3ybFZnDVvkDv+ncX4+5e0cSXFC0ujcu5ds4aD+3sl3K+4/7npS//rCKfLhA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b5af212-0f41-4d4c-b0c9-cebade27f0e6",
                            TwoFactorEnabled = false,
                            UserName = "staff3"
                        },
                        new
                        {
                            Id = "ACCOUNT9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38d494ce-b170-49c2-b97c-53f2ee49ffaa",
                            Email = "student1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "student1",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@GMAIL.COM",
                            NormalizedUserName = "STUDENT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYvRiKaB/tshRmhzJWcuxn3ihmqKrF6KoRCxpUxKYn0IHp/a1PGR4nZY5Q/o8V0Kw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c19373ae-8fce-4c2c-ae41-a53a088e95a5",
                            TwoFactorEnabled = false,
                            UserName = "student1"
                        },
                        new
                        {
                            Id = "ACCOUNT10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2c260a6-d507-46a1-b453-1004cf776cb1",
                            Email = "student2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "student2",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@GMAIL.COM",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEGW27ic+IfUOMaw5dCgbqCfoUjwEQKsONREB1ivNRmH/FcleqrfSwmm6iFXbEzYttg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2e412ae-94d8-4f88-bba7-ab71655d6665",
                            TwoFactorEnabled = false,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = "ACCOUNT11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3e51d3c-d5a1-4506-9b6b-b8936bf934a7",
                            Email = "student3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "student3",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@GMAIL.COM",
                            NormalizedUserName = "STUDENT3",
                            PasswordHash = "AQAAAAEAACcQAAAAELix6JUwPpdEfFQemKP340D7JBWocnIC4UJbdQl71V6JCs/UFr0m0JnUotVj4IetgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e5c5680-5d46-433a-b45e-ebe16bf042e3",
                            TwoFactorEnabled = false,
                            UserName = "student3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Admin", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Admin")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.Admin", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Apartment", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Region", "Region")
                        .WithMany("Apartment")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Student", "Student")
                        .WithMany("Apartment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.AttendReport", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.BookingDetail", "BookingDetail")
                        .WithMany("AttendReport")
                        .HasForeignKey("BookingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingDetail");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Booking", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Apartment", "Apartment")
                        .WithMany("Booking")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetail", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDetail")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Package", "Package")
                        .WithMany("BookingDetail")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetailStaff", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.BookingDetail", "BookingDetail")
                        .WithMany("BookingDetailStaff")
                        .HasForeignKey("BookingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Staff", "Staff")
                        .WithMany("BookingDetailStaff")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingDetail");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.AttendReport", "AttendReports")
                        .WithOne("FeedBack")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.FeedBack", "AttendReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Student", "Students")
                        .WithMany("FeedBack")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendReports");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PackageService", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Package", "Package")
                        .WithMany("PackageService")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Service", "Service")
                        .WithMany("PackageService")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Booking", "Booking")
                        .WithMany("PaymentMethod")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.ReportWork", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.AttendReport", "AttendReport")
                        .WithOne("ReportWorks")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.ReportWork", "AttendReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Staff", "Staff")
                        .WithMany("ReportWork")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendReport");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Service", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Category", "Category")
                        .WithMany("Service")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Staff", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Staff")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.Staff", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.StaffCategory", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Category", "Category")
                        .WithMany("StaffCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentHouseMembershipCart.Domain.Entities.Staff", "Staff")
                        .WithMany("StaffCategories")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Student", b =>
                {
                    b.HasOne("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Student")
                        .HasForeignKey("StudentHouseMembershipCart.Domain.Entities.Student", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Apartment", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.AttendReport", b =>
                {
                    b.Navigation("FeedBack")
                        .IsRequired();

                    b.Navigation("ReportWorks")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDetail");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.BookingDetail", b =>
                {
                    b.Navigation("AttendReport");

                    b.Navigation("BookingDetailStaff");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Category", b =>
                {
                    b.Navigation("Service");

                    b.Navigation("StaffCategories");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Package", b =>
                {
                    b.Navigation("BookingDetail");

                    b.Navigation("PackageService");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Region", b =>
                {
                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Service", b =>
                {
                    b.Navigation("PackageService");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Staff", b =>
                {
                    b.Navigation("BookingDetailStaff");

                    b.Navigation("ReportWork");

                    b.Navigation("StaffCategories");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.Entities.Student", b =>
                {
                    b.Navigation("Apartment");

                    b.Navigation("FeedBack");
                });

            modelBuilder.Entity("StudentHouseMembershipCart.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
